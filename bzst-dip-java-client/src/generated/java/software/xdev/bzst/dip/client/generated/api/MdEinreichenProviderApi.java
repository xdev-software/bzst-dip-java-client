/*
 * dip-mds
 * DIP-Massendatenschnittstelle
 *
 * The version of the OpenAPI document: DIP-MDS 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package software.xdev.bzst.dip.client.generated.api;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

import com.fasterxml.jackson.core.type.TypeReference;

import software.xdev.bzst.dip.client.generated.client.ApiClient;
import software.xdev.bzst.dip.client.generated.client.ApiException;
import software.xdev.bzst.dip.client.generated.client.BaseApi;
import software.xdev.bzst.dip.client.generated.client.Configuration;
import software.xdev.bzst.dip.client.generated.client.Pair;

public class MdEinreichenProviderApi extends BaseApi {

  public MdEinreichenProviderApi() {
    super(Configuration.getDefaultApiClient());
  }

  public MdEinreichenProviderApi(final ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Abruf einer Liste aller Datentransfernummern mit verfügbarem Protokoll
   * Abruf einer Liste aller Datentransfernummern mit verfügbarem Protokoll
   * @param authorization  (optional)
   * @return InputStream
   * @throws ApiException if fails to make API call
   */
  public InputStream alleProtokollnummern(final String authorization) throws ApiException {
    return this.alleProtokollnummern(authorization, Collections.emptyMap());
  }


  /**
   * Abruf einer Liste aller Datentransfernummern mit verfügbarem Protokoll
   * Abruf einer Liste aller Datentransfernummern mit verfügbarem Protokoll
   * @param authorization  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return InputStream
   * @throws ApiException if fails to make API call
   */
  public InputStream alleProtokollnummern(final String authorization, final Map<String, String> additionalHeaders) throws ApiException {
    final Object localVarPostBody = null;
    
    // create path and map variables
    final String localVarPath = "/dip/md/protocolnumbers";

    final StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    final List<Pair> localVarQueryParams = new ArrayList<>();
    final List<Pair> localVarCollectionQueryParams = new ArrayList<>();
    final Map<String, String> localVarHeaderParams = new HashMap<>();
    final Map<String, String> localVarCookieParams = new HashMap<>();
    final Map<String, Object> localVarFormParams = new HashMap<>();

    if (authorization != null)
      localVarHeaderParams.put("Authorization", this.apiClient.parameterToString(authorization));

    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/octet-stream"
    };
    final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);

    final String[] localVarAuthNames = new String[] {  };

    final TypeReference<InputStream> localVarReturnType = new TypeReference<>()
	{
	};
    return this.apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Einreichung zusätzlicher Anhänge
   * Einreichung zusätzlicher Anhänge unter Angabe einer Datentransfernummer
   * @param datentransfernummer Die Datentransfernummer, die die Transaktion identifiziert (required)
   * @param authorization  (optional)
   * @param body Einreichung zusätzlicher Anhänge unter Angabe einer Datentransfernummer (optional)
   * @throws ApiException if fails to make API call
   */
  public void anhangEinreichen(final String datentransfernummer, final String authorization, final InputStream body) throws ApiException {
    this.anhangEinreichen(datentransfernummer, authorization, body, Collections.emptyMap());
  }


  /**
   * Einreichung zusätzlicher Anhänge
   * Einreichung zusätzlicher Anhänge unter Angabe einer Datentransfernummer
   * @param datentransfernummer Die Datentransfernummer, die die Transaktion identifiziert (required)
   * @param authorization  (optional)
   * @param body Einreichung zusätzlicher Anhänge unter Angabe einer Datentransfernummer (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void anhangEinreichen(final String datentransfernummer, final String authorization, final InputStream body, final Map<String, String> additionalHeaders) throws ApiException {
    final Object localVarPostBody = body;
    
    // verify the required parameter 'datentransfernummer' is set
    if (datentransfernummer == null) {
      throw new ApiException(400, "Missing the required parameter 'datentransfernummer' when calling anhangEinreichen");
    }
    
    // create path and map variables
    final String localVarPath = "/dip/md/{datentransfernummer}/attachment"
      .replaceAll("\\{" + "datentransfernummer" + "\\}", this.apiClient.escapeString(datentransfernummer.toString()));

    final StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    final List<Pair> localVarQueryParams = new ArrayList<>();
    final List<Pair> localVarCollectionQueryParams = new ArrayList<>();
    final Map<String, String> localVarHeaderParams = new HashMap<>();
    final Map<String, String> localVarCookieParams = new HashMap<>();
    final Map<String, Object> localVarFormParams = new HashMap<>();

    if (authorization != null)
      localVarHeaderParams.put("Authorization", this.apiClient.parameterToString(authorization));

    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/octet-stream"
    };
    final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);

    final String[] localVarAuthNames = new String[] {  };
	  
	  this.apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Abbruch der laufenden Übertragung und Verwerfen der bisher übertragenen Dateien
   * Verkünden der Absicht, die laufende Massendatenlieferung abzubrechen und die übertragenen Dateien zu verwerfen
   * @param datentransfernummer Die Datentransfernummer, die die Transaktion identifiziert (required)
   * @param authorization  (optional)
   * @throws ApiException if fails to make API call
   */
  public void einreichungAbbrechen(final String datentransfernummer, final String authorization) throws ApiException {
    this.einreichungAbbrechen(datentransfernummer, authorization, Collections.emptyMap());
  }


  /**
   * Abbruch der laufenden Übertragung und Verwerfen der bisher übertragenen Dateien
   * Verkünden der Absicht, die laufende Massendatenlieferung abzubrechen und die übertragenen Dateien zu verwerfen
   * @param datentransfernummer Die Datentransfernummer, die die Transaktion identifiziert (required)
   * @param authorization  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void einreichungAbbrechen(final String datentransfernummer, final String authorization, final Map<String, String> additionalHeaders) throws ApiException {
    final Object localVarPostBody = null;
    
    // verify the required parameter 'datentransfernummer' is set
    if (datentransfernummer == null) {
      throw new ApiException(400, "Missing the required parameter 'datentransfernummer' when calling einreichungAbbrechen");
    }
    
    // create path and map variables
    final String localVarPath = "/dip/md/{datentransfernummer}/abort"
      .replaceAll("\\{" + "datentransfernummer" + "\\}", this.apiClient.escapeString(datentransfernummer.toString()));

    final StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    final List<Pair> localVarQueryParams = new ArrayList<>();
    final List<Pair> localVarCollectionQueryParams = new ArrayList<>();
    final Map<String, String> localVarHeaderParams = new HashMap<>();
    final Map<String, String> localVarCookieParams = new HashMap<>();
    final Map<String, Object> localVarFormParams = new HashMap<>();

    if (authorization != null)
      localVarHeaderParams.put("Authorization", this.apiClient.parameterToString(authorization));

    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);

    final String[] localVarAuthNames = new String[] {  };
	  
	  this.apiClient.invokeAPI(
        localVarPath,
        "PATCH",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Anfordern einer Datentransfernummer und Einleiten einer Massendatenlieferung
   * Anfordern einer Datentransfernummer zur Identifikation der Lieferung und Einleiten einer Massendatenlieferung
   * @param fachverfahren Das Ziel-Fachverfahren (required)
   * @param authorization  (optional)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String einreichungAnmelden(final String fachverfahren, final String authorization) throws ApiException {
    return this.einreichungAnmelden(fachverfahren, authorization, Collections.emptyMap());
  }


  /**
   * Anfordern einer Datentransfernummer und Einleiten einer Massendatenlieferung
   * Anfordern einer Datentransfernummer zur Identifikation der Lieferung und Einleiten einer Massendatenlieferung
   * @param fachverfahren Das Ziel-Fachverfahren (required)
   * @param authorization  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String einreichungAnmelden(final String fachverfahren, final String authorization, final Map<String, String> additionalHeaders) throws ApiException {
    final Object localVarPostBody = null;
    
    // verify the required parameter 'fachverfahren' is set
    if (fachverfahren == null) {
      throw new ApiException(400, "Missing the required parameter 'fachverfahren' when calling einreichungAnmelden");
    }
    
    // create path and map variables
    final String localVarPath = "/dip/start/{fachverfahren}"
      .replaceAll("\\{" + "fachverfahren" + "\\}", this.apiClient.escapeString(fachverfahren.toString()));

    final StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    final List<Pair> localVarQueryParams = new ArrayList<>();
    final List<Pair> localVarCollectionQueryParams = new ArrayList<>();
    final Map<String, String> localVarHeaderParams = new HashMap<>();
    final Map<String, String> localVarCookieParams = new HashMap<>();
    final Map<String, Object> localVarFormParams = new HashMap<>();

    if (authorization != null)
      localVarHeaderParams.put("Authorization", this.apiClient.parameterToString(authorization));

    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "text/plain"
    };
    final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);

    final String[] localVarAuthNames = new String[] {  };

    final TypeReference<String> localVarReturnType = new TypeReference<>()
	{
	};
    return this.apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Erklärung, dass die Massendatenlieferung abgeschlossen ist
   * Erklärung der Fertigstellung der Massendatenlieferung
   * @param datentransfernummer Die Datentransfernummer, die die Transaktion identifiziert (required)
   * @param authorization  (optional)
   * @throws ApiException if fails to make API call
   */
  public void einreichungBeenden(final String datentransfernummer, final String authorization) throws ApiException {
    this.einreichungBeenden(datentransfernummer, authorization, Collections.emptyMap());
  }


  /**
   * Erklärung, dass die Massendatenlieferung abgeschlossen ist
   * Erklärung der Fertigstellung der Massendatenlieferung
   * @param datentransfernummer Die Datentransfernummer, die die Transaktion identifiziert (required)
   * @param authorization  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void einreichungBeenden(final String datentransfernummer, final String authorization, final Map<String, String> additionalHeaders) throws ApiException {
    final Object localVarPostBody = null;
    
    // verify the required parameter 'datentransfernummer' is set
    if (datentransfernummer == null) {
      throw new ApiException(400, "Missing the required parameter 'datentransfernummer' when calling einreichungBeenden");
    }
    
    // create path and map variables
    final String localVarPath = "/dip/md/{datentransfernummer}/finish"
      .replaceAll("\\{" + "datentransfernummer" + "\\}", this.apiClient.escapeString(datentransfernummer.toString()));

    final StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    final List<Pair> localVarQueryParams = new ArrayList<>();
    final List<Pair> localVarCollectionQueryParams = new ArrayList<>();
    final Map<String, String> localVarHeaderParams = new HashMap<>();
    final Map<String, String> localVarCookieParams = new HashMap<>();
    final Map<String, Object> localVarFormParams = new HashMap<>();

    if (authorization != null)
      localVarHeaderParams.put("Authorization", this.apiClient.parameterToString(authorization));

    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);

    final String[] localVarAuthNames = new String[] {  };
	  
	  this.apiClient.invokeAPI(
        localVarPath,
        "PATCH",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Einreichung des XML
   * Einreichung der Daten-XML unter Angabe einer Datentransfernummer
   * @param datentransfernummer Die Datentransfernummer, die die Transaktion identifiziert (required)
   * @param authorization  (optional)
   * @param body Einreichung der Daten-XML unter Angabe einer Datentransfernummer (optional)
   * @throws ApiException if fails to make API call
   */
  public void massendatenEinreichen(final String datentransfernummer, final String authorization, final InputStream body) throws ApiException {
    this.massendatenEinreichen(datentransfernummer, authorization, body, Collections.emptyMap());
  }


  /**
   * Einreichung des XML
   * Einreichung der Daten-XML unter Angabe einer Datentransfernummer
   * @param datentransfernummer Die Datentransfernummer, die die Transaktion identifiziert (required)
   * @param authorization  (optional)
   * @param body Einreichung der Daten-XML unter Angabe einer Datentransfernummer (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void massendatenEinreichen(final String datentransfernummer, final String authorization, final InputStream body, final Map<String, String> additionalHeaders) throws ApiException {
    final Object localVarPostBody = body;
    
    // verify the required parameter 'datentransfernummer' is set
    if (datentransfernummer == null) {
      throw new ApiException(400, "Missing the required parameter 'datentransfernummer' when calling massendatenEinreichen");
    }
    
    // create path and map variables
    final String localVarPath = "/dip/md/{datentransfernummer}/xml"
      .replaceAll("\\{" + "datentransfernummer" + "\\}", this.apiClient.escapeString(datentransfernummer.toString()));

    final StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    final List<Pair> localVarQueryParams = new ArrayList<>();
    final List<Pair> localVarCollectionQueryParams = new ArrayList<>();
    final Map<String, String> localVarHeaderParams = new HashMap<>();
    final Map<String, String> localVarCookieParams = new HashMap<>();
    final Map<String, Object> localVarFormParams = new HashMap<>();

    if (authorization != null)
      localVarHeaderParams.put("Authorization", this.apiClient.parameterToString(authorization));

    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/octet-stream"
    };
    final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);

    final String[] localVarAuthNames = new String[] {  };
	  
	  this.apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Abruf des Ergebnisprotokolls
   * Abruf des Ergebnisprotokolls
   * @param datentransfernummer Die Datentransfernummer, die die Transaktion identifiziert (required)
   * @param authorization  (optional)
   * @return InputStream
   * @throws ApiException if fails to make API call
   */
  public InputStream protokollAbrufen(final String datentransfernummer, final String authorization) throws ApiException {
    return this.protokollAbrufen(datentransfernummer, authorization, Collections.emptyMap());
  }


  /**
   * Abruf des Ergebnisprotokolls
   * Abruf des Ergebnisprotokolls
   * @param datentransfernummer Die Datentransfernummer, die die Transaktion identifiziert (required)
   * @param authorization  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return InputStream
   * @throws ApiException if fails to make API call
   */
  public InputStream protokollAbrufen(final String datentransfernummer, final String authorization, final Map<String, String> additionalHeaders) throws ApiException {
    final Object localVarPostBody = null;
    
    // verify the required parameter 'datentransfernummer' is set
    if (datentransfernummer == null) {
      throw new ApiException(400, "Missing the required parameter 'datentransfernummer' when calling protokollAbrufen");
    }
    
    // create path and map variables
    final String localVarPath = "/dip/md/{datentransfernummer}/protocol"
      .replaceAll("\\{" + "datentransfernummer" + "\\}", this.apiClient.escapeString(datentransfernummer.toString()));

    final StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    final List<Pair> localVarQueryParams = new ArrayList<>();
    final List<Pair> localVarCollectionQueryParams = new ArrayList<>();
    final Map<String, String> localVarHeaderParams = new HashMap<>();
    final Map<String, String> localVarCookieParams = new HashMap<>();
    final Map<String, Object> localVarFormParams = new HashMap<>();

    if (authorization != null)
      localVarHeaderParams.put("Authorization", this.apiClient.parameterToString(authorization));

    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/octet-stream"
    };
    final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);

    final String[] localVarAuthNames = new String[] {  };

    final TypeReference<InputStream> localVarReturnType = new TypeReference<>()
	{
	};
    return this.apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Erhalt des Protokolls bestätigen
   * Erhalt des Protokolls bestätigen
   * @param datentransfernummer Die Datentransfernummer, die die Transaktion identifiziert (required)
   * @param authorization  (optional)
   * @throws ApiException if fails to make API call
   */
  public void protokollErhalten(final String datentransfernummer, final String authorization) throws ApiException {
    this.protokollErhalten(datentransfernummer, authorization, Collections.emptyMap());
  }


  /**
   * Erhalt des Protokolls bestätigen
   * Erhalt des Protokolls bestätigen
   * @param datentransfernummer Die Datentransfernummer, die die Transaktion identifiziert (required)
   * @param authorization  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void protokollErhalten(final String datentransfernummer, final String authorization, final Map<String, String> additionalHeaders) throws ApiException {
    final Object localVarPostBody = null;
    
    // verify the required parameter 'datentransfernummer' is set
    if (datentransfernummer == null) {
      throw new ApiException(400, "Missing the required parameter 'datentransfernummer' when calling protokollErhalten");
    }
    
    // create path and map variables
    final String localVarPath = "/dip/md/{datentransfernummer}/protocol"
      .replaceAll("\\{" + "datentransfernummer" + "\\}", this.apiClient.escapeString(datentransfernummer.toString()));

    final StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    final List<Pair> localVarQueryParams = new ArrayList<>();
    final List<Pair> localVarCollectionQueryParams = new ArrayList<>();
    final Map<String, String> localVarHeaderParams = new HashMap<>();
    final Map<String, String> localVarCookieParams = new HashMap<>();
    final Map<String, Object> localVarFormParams = new HashMap<>();

    if (authorization != null)
      localVarHeaderParams.put("Authorization", this.apiClient.parameterToString(authorization));

    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);

    final String[] localVarAuthNames = new String[] {  };
	  
	  this.apiClient.invokeAPI(
        localVarPath,
        "PATCH",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  @Override
  public <T> T invokeAPI(final String url, final String method, final Object request, final TypeReference<T> returnType, final Map<String, String> additionalHeaders) throws ApiException {
    final String localVarPath = url.replace(this.apiClient.getBaseURL(), "");
    final StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    final List<Pair> localVarQueryParams = new ArrayList<>();
    final List<Pair> localVarCollectionQueryParams = new ArrayList<>();
    final Map<String, String> localVarHeaderParams = new HashMap<>();
    final Map<String, String> localVarCookieParams = new HashMap<>();
    final Map<String, Object> localVarFormParams = new HashMap<>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = this.apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = this.apiClient.selectHeaderContentType(localVarContentTypes);

    final String[] localVarAuthNames = new String[] {  };

    return this.apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
